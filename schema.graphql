"""Represents an organized play campaign."""
type Campaign implements Node {
  """A short code or abbreviation for the full campaign name."""
  code: String!

  """
  A default value to be used when setting up tables of this campaign's scenarios.
  """
  defaultTableSize: Int

  """The game system which is used to play this campaign."""
  gameSystem: GameSystem!
  id: ID!

  """
  Whether or not the campaign is still actively played. A campaign is said to be retired if
  it is not active.
  
  """
  isActive: Boolean!

  """The unique name for this campaign."""
  name: String!

  """The organized play network administering this campaign, if any."""
  network: OrganizedPlayNetwork

  """Optional URL of the primary website for this campaign."""
  url: String

  """Whether or not the campaign has the concept of factions."""
  usesFactions: Boolean!

  """
  Whether or not the campaign identifies its characters with unique member numbers.
  """
  usesMemberNumbers: Boolean!
}

"""Represents an organized play campaign faction."""
type CampaignFaction implements Node {
  """Whether this faction is active or retired."""
  activationState: CampaignFactionActivationState!

  """The campaign defining this faction."""
  campaign: Campaign!

  """Optional text explaining what the faction is."""
  description: String
  id: ID!

  """The name of this faction. Unique within the campaign."""
  name: String!

  """The time at which this faction was retired, if applicable."""
  retiredAt: ISO8601DateTime

  """Optional URL to a webpage with more information about the faction."""
  url: String
}

enum CampaignFactionActivationState {
  """Currently active in the campaign"""
  ACTIVE

  """No longer active in the campaign"""
  RETIRED
}

type CampaignMode implements Node {
  """
  The organized play campaign with which this mode is associated.
  
  """
  campaign: Campaign!
  id: ID!

  """
  Whether or not this is the campaign's default mode. Any session or character associated with
  the campaign is treated as using the default campaign mode if no mode is explicitly associated
  with the session or character. Only one mode for a campaign can be the default.
  
  """
  isDefault: Boolean!

  """The name of this campaign mode. Unique to the campaign."""
  name: String!
}

"""Represents a campaign tag that can be applied to a scenario."""
type CampaignTag implements Node {
  """The campaign defining this tag."""
  campaign: Campaign!
  id: ID!

  """The name of this tag. Unique within the campaign."""
  name: String!
}

"""Represents an organized play campaign character."""
type Character implements Node {
  """Whether this character is active or archived."""
  activationState: CharacterActivationState!

  """The time at which this character was archived, if applicable."""
  archivedAt: ISO8601DateTime

  """The organized play campaign in which this character is played."""
  campaign: Campaign!

  """
  The campaign ruleset this character is meant to be played under, if any.
  """
  campaignMode: CampaignMode

  """The characters's classes and levels."""
  characterClassLevels: [CharacterClassLevel!]!

  """The time when the character was created."""
  createdAt: ISO8601DateTime!

  """The game system under which this character is played."""
  gameSystem: GameSystem!
  id: ID!

  """
  Optional attribute uniquely identifying this character within its organized play network.
  """
  memberNumber: String

  """The unique name for this character class."""
  name: String!

  """Optional notes from the player about the character."""
  notes: String

  """The player who plays this character."""
  player: Player!

  """Returns the character's signups signups in chronological order."""
  signups(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PlayerSignupConnection!
}

enum CharacterActivationState {
  """Legally playable within the organized play campaign"""
  ACTIVE

  """Retired and no longer playable"""
  ARCHIVED
}

"""Represents a character class defined by a game system."""
type CharacterClass implements Node {
  """The game system that defines this character class."""
  gameSystem: GameSystem!
  id: ID!

  """The unique name for this character class."""
  name: String!
}

"""The connection type for CharacterClass."""
type CharacterClassConnection {
  """A list of edges."""
  edges: [CharacterClassEdge]

  """A list of nodes."""
  nodes: [CharacterClass]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type CharacterClassEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: CharacterClass
}

"""
Represents an individual class/level pair assigned to a character. A character may have
many class/level pairs.

"""
type CharacterClassLevel implements Node {
  """The character class for the pair."""
  characterClass: CharacterClass!

  """The time when the pair was added to the character."""
  createdAt: ISO8601DateTime!
  id: ID!

  """The class level for the pair."""
  level: Int!
}

enum CombatRole {
  ALCHEMIST
  ARCANE_CASTER
  ARCANIST
  ARCHER
  ARTILLERY
  BARBARIAN
  BARD
  BLOODRAGER
  BRAWLER
  CAVALIER
  CAVALRY
  CLERIC
  CONTROLLER
  DEFENDER
  DIVINE_CASTER
  DRUID
  FIGHTER
  GENERALIST
  GUNSLINGER
  HUNTER
  INQUISITOR
  INVESTIGATOR
  LEADER_HEALING
  LEADER_TACTICAL
  LIGHT_INFANTRY
  MAGUS
  MEDIC_SUPPORT
  MONK
  NINJA
  ORACLE
  PALADIN
  PSIONIC_MANIFESTER
  RANGER
  ROGUE
  SAMURAI
  SHAMAN
  SKALD
  SLAYER
  SORCERER
  STRIKER_MELEE
  STRIKER_RANGED
  SUMMONER
  SWASHBUCKLER
  TANK
  WARPRIEST
  WITCH
  WIZARD
}

"""Autogenerated input type of CreateSession"""
input CreateSessionInput {
  """
  The unique identifier of the campaign mode to be used for this session, if any.
  """
  campaignModeId: ID

  """Whether the session is active in the event schedule. Defaults to true."""
  isActive: Boolean

  """Optional notes to potential participants about the session."""
  notes: String

  """
  The unique identifier of the offering for the scenario to be run in this session.
  """
  scenarioOfferingId: ID!

  """The unique identifier of the slot in which this session is scheduled."""
  slotId: ID!

  """The maximum number of people who can play at one table."""
  tableCount: Int!

  """The maximum number of tables that can be run in the session."""
  tableSize: Int!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateSession"""
type CreateSessionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """Errors resulting from invalid input, if any."""
  errors: [UserError!]!

  """The newly created session."""
  session: Session
}

"""Autogenerated input type of CreateSlot"""
input CreateSlotInput {
  """The time when the slot ends."""
  endsAt: ISO8601DateTime!

  """
  The unique identifier of the event within which the slot is to be created.
  """
  eventId: ID!

  """The time when the slot starts."""
  startsAt: ISO8601DateTime!

  """
  The time zone of the slot's location, from the IANA time zone database.
  """
  timezone: String!

  """
  The unique identifier of the venue where the slot will take place, if any.
  """
  venueId: ID

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateSlot"""
type CreateSlotPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """Errors resulting from invalid input, if any."""
  errors: [UserError!]!

  """The newly created slot."""
  slot: Slot
}

type Event implements Node {
  """Whether the registration is active or canceled."""
  activationState: EventActivationState!

  """The city in which the event takes place. Null if the event is online."""
  city: String

  """
  The two-character ISO 3166 code for the country where the event takes place. Null if the
  event is online.
  
  """
  country: String

  """The time when the event was created."""
  createdAt: ISO8601DateTime!

  """The date on which the event ends. Null if the event is recurring."""
  endsOn: ISO8601Date
  id: ID!

  """Whether or not the event is visible in the public event listings."""
  isVisible: Boolean!

  """
  The human language spoken for this event's activities, as a two-letter ISO 639-1 code, if specified
  
  """
  language: String

  """
  The geographic location of the event (typically a city, state and country).
  """
  location: String!

  """The person who is in charge of the event."""
  organizer: EventOrganizer!

  """
  Returns the event's registrations, if the requesting party is a site administrator or is
  registered for the event, or an empty list otherwise.
  
  Only active registrations are returned by default. The `activation_state` argument allows
  a different set of activation states to be chosen.
  
  """
  registrations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    activationState: [RegistrationActivationState!]
  ): RegistrationConnection!

  """
  Returns the access roles defined for this event.
  
  """
  roles: [EventRole!]!

  """
  Returns the event's slots in chronological order.
  
  """
  slots(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SlotConnection!

  """The human-readable URL identifier for the event."""
  slug: String!

  """The date on which the event starts. Null if the event is recurring."""
  startsOn: ISO8601Date

  """
  The two-character ISO 3166 code for the state/subdivision where the event takes place.
  Null if the event is online.
  
  """
  state: String

  """The title of the event."""
  title: String!

  """The Warhorn URL for this event."""
  url: String!
}

enum EventActivationState {
  """In good standing."""
  ACTIVE

  """No longer running."""
  ARCHIVED
}

type EventOrganizer implements Node {
  id: ID!
}

type EventRole implements Node {
  """The time when the role was created."""
  createdAt: ISO8601DateTime!
  id: ID!

  """A descriptive name for the role."""
  name: String!

  """
  The list of permissions defining the operations accessible by this role.
  
  """
  permissions: [Permission!]!
}

"""Represents a specific game engine or ruleset."""
type GameSystem implements Node {
  """
  Optional short form of this game system's name as popularly used in the community.
  """
  abbreviation: String

  """Returns the character classes defined by this game system."""
  characterClasses(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): CharacterClassConnection!
  id: ID!

  """The unique name for this game system."""
  name: String!

  """Optional URL of the primary website for this game system."""
  url: String

  """Whether or not this game system uses character classes."""
  usesCharacterClasses: Boolean!
}

"""Represents a registrant's participation as a GM for a session."""
type GmSignup implements Signup & Node {
  id: ID!

  """
  Returns the registration associated with the registrant who signed up for the activity,
  if the requesting party is a site administrator or is registered for the event.
  
  """
  registration: Registration

  """
  Returns the access role defined for this signup within the scope of the session.
  
  """
  role: SignupRole

  """The session for which the registrant is GMing."""
  session: Session!
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

type Mutation {
  """Create a session within a slot."""
  createSession(input: CreateSessionInput!): CreateSessionPayload

  """Create a slot within an event."""
  createSlot(input: CreateSlotInput!): CreateSlotPayload
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

type Operation implements Node {
  """The time when the operation was created."""
  createdAt: ISO8601DateTime!
  id: ID!

  """
  The string that uniquely identifies the operation for the purpose of access control
  checks.
  
  """
  key: String!
}

"""Represents an organized play network."""
type OrganizedPlayNetwork implements Node {
  """Whether or not the network allows membership."""
  allowsMembers: Boolean!
  id: ID!

  """The unique name for this network."""
  name: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Permission implements Node {
  """Whether the permission allows the associated operation or denies it."""
  allow: Boolean!

  """The time when the permission was created."""
  createdAt: ISO8601DateTime!
  id: ID!

  """The operation for which this permission allows or denies access."""
  operation: Operation!
}

type Player {
  """
  The player's name. Will be null in any of these cases:
  
  * The player's user account is not active
  * The requesting party is not a site administrator or the player themself
  
  """
  name: String
}

"""Represents a registrant's participation as a player for a session."""
type PlayerSignup implements Signup & Node {
  """
  Optional attribute representing the player character in additional detail.
  """
  character: Character

  """
  Optional attribute indicating the player character's primary character class.
  """
  characterClass: CharacterClass

  """
  Optional attribute describing the player character's primary role in combat.
  """
  combatRole: CombatRole
  id: ID!

  """
  Optional attribute indicating the player character's total class levels
  """
  level: Int

  """
  Returns the registration associated with the registrant who signed up for the activity,
  if the requesting party is a site administrator or is registered for the event.
  
  """
  registration: Registration

  """
  Returns the access role defined for this signup within the scope of the session.
  
  """
  role: SignupRole

  """The session for which the registrant is playing."""
  session: Session!
}

"""The connection type for PlayerSignup."""
type PlayerSignupConnection {
  """A list of edges."""
  edges: [PlayerSignupEdge]

  """A list of nodes."""
  nodes: [PlayerSignup]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type PlayerSignupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PlayerSignup
}

type Query {
  """Look up an event by slug."""
  event(slug: String!): Event!

  """
  Look up event requests. Site administrators can see all requests. Others can only see the
  requests they made themselves.
  
  """
  requests(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Return only those requests with the given approval status."""
    approvalStatus: RequestApprovalStatus
  ): RequestConnection!

  """Look up sessions for specific events."""
  sessions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int

    """Return only those sessions with given availability."""
    availability: SessionAvailabilityFilter

    """Return only those sessions for given events."""
    events: [String!]!

    """Return only those sessions starting after a given time."""
    startsAfter: ISO8601DateTime

    """Return only those sessions starting before a given time."""
    startsBefore: ISO8601DateTime
  ): SessionConnection!
}

type Registrant {
  """
  Whether the registrant's user account is active or not.
  
  **When a user account is canceled, all associated registrations are also canceled.**
  
  """
  activationState: RegistrantActivationState!

  """The avatar that visually represents the registrant"""
  avatar: UserAvatar

  """
  The registrant's email address. Will be null in any of these cases:
  
  * The registrant's user account is not active
  * The registrant's email address has not been confirmed
  * The requesting party is not authorized to see registrant email addresses
  
  """
  email: String

  """Whether or not the registrant is a site administrator."""
  isAdmin: Boolean!

  """
  The registrant's name. Will be null in any of these cases:
  
  * The registrant's user account is not active
  * The requesting party is not a site administrator or registered for the event
  
  """
  name: String
}

enum RegistrantActivationState {
  """In good standing"""
  ACTIVE

  """No longer in active usage"""
  INACTIVE
}

type Registration implements Node {
  """Whether the registration is active or canceled."""
  activationState: RegistrationActivationState!

  """The time when the registration was canceled, if any."""
  canceledAt: ISO8601DateTime

  """The time when the registration was created."""
  createdAt: ISO8601DateTime!

  """The event for which the user registered."""
  event: Event!
  id: ID!

  """The user who is registered for the event."""
  registrant: Registrant!
}

enum RegistrationActivationState {
  """Able to participate in the event"""
  ACTIVE

  """No longer able to participate in the event"""
  CANCELED
}

"""The connection type for Registration."""
type RegistrationConnection {
  """A list of edges."""
  edges: [RegistrationEdge]

  """A list of nodes."""
  nodes: [Registration]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type RegistrationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Registration
}

type Request implements Node {
  """The approval for this request, if any."""
  approval: RequestApproval

  """Whether the request is pending, approved or rejected."""
  approvalStatus: RequestApprovalStatus!

  """
  The two-character ISO 3166 code for the country where the event is located. Null if the
  event is online.
  
  """
  country: String

  """The date on which the event ends. Null if the event is recurring."""
  endsOn: ISO8601Date

  """The event created upon approval of the request."""
  event: Event
  id: ID!

  """Whether or not the event is visible in the public event listings."""
  isVisible: Boolean!

  """
  The geographic location of the event (typically a city, state and country).
  """
  location: String!

  """Notes from the requestor to the approver."""
  notes: String

  """The rejection for this request, if any."""
  rejection: RequestRejection

  """The time when the request was created."""
  requestedAt: ISO8601DateTime

  """The user who submitted the request."""
  requester: Requester

  """The human-readable URL identifier for the event."""
  slug: String!

  """The date on which the event starts. Null if the event is recurring."""
  startsOn: ISO8601Date

  """The title of the event."""
  title: String!
}

type RequestApproval implements Node {
  """The time when the request was approved, if applicable."""
  approvedAt: ISO8601DateTime

  """The user who approved the request."""
  approver: RequestApprover
  id: ID!

  """Notes from the approver to the requester."""
  notes: String

  """The request that was approved."""
  request: Request!

  """The human-readable URL identifier for the event."""
  slug: String!

  """The title of the event."""
  title: String!
}

enum RequestApprovalStatus {
  """Approved, with a corresponding event"""
  APPROVED

  """Not yet approved or rejected"""
  PENDING

  """Rejected, with no corresponding event"""
  REJECTED
}

type RequestApprover {
  """
  The name of the approver. Null if the approver's user account is not active.
  """
  name: String
}

"""The connection type for Request."""
type RequestConnection {
  """A list of edges."""
  edges: [RequestEdge]

  """A list of nodes."""
  nodes: [Request]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type RequestEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Request
}

type Requester {
  """The name of the requester. Null if the user account is not active."""
  name: String
}

type RequestRejecter {
  """
  The name of the rejecter. Null if the rejecter's user account is not active.
  """
  name: String
}

type RequestRejection implements Node {
  id: ID!

  """Notes from the rejecter to the requestor."""
  notes: String

  """The time when the request was rejected, if applicable."""
  rejectedAt: ISO8601DateTime

  """The user who rejected the request."""
  rejecter: RequestRejecter

  """The request that was rejected."""
  request: Request!
}

"""Represents a scenario that can be offered at an event."""
type Scenario implements Node {
  """The optional name of the author(s) of this scenario."""
  author: String

  """The optional blurb describing what this scenario is about."""
  blurb: String

  """The organized play campaign publishing this scenario, if any."""
  campaign: Campaign

  """The URL to an image of the scenario's cover art"""
  coverArtUrl: String

  """
  A default value to be used when setting up tables of this scenario. If present, overrides
  the attribute of the same name from the scenario's campaign (if any).
  
  """
  defaultTableSize: Int

  """The event offering the scenario. Will be null for a global scenario."""
  event: Event

  """The URL to the scenario's homepage or store webpage."""
  externalUrl: String

  """Returns the campaign factions relevant for this scenario."""
  factions: [CampaignFaction!]!

  """The game system under which this scenario is played."""
  gameSystem: GameSystem!
  id: ID!

  """Whether this scenario is global or is custom for this specific event"""
  isCustom: Boolean!

  """
  The optional maximum level for characters to be played in this scenario.
  """
  maxLevel: Int

  """
  The optional minimum level for characters to be played in this scenario.
  """
  minLevel: Int

  """The name of this scenario."""
  name: String

  """Returns the campaign tags applied to this scenario."""
  tags: [CampaignTag!]!
}

"""Represents a particular event's customized offering of a scenario."""
type ScenarioOffering implements Node {
  """
  Any extra copy to be displayed for this scenario beyond author name, blurb etc.
  
  """
  customCopy: String

  """The customized scenario name used just for this event, if any."""
  customName: String

  """The event offering the scenario."""
  event: Event!
  id: ID!

  """
  The name of this scenario as offered by this event. If not customized, defaults to the
  original scenario name.
  
  """
  label: String

  """The scenario being offered."""
  scenario: Scenario!

  """Returns the sessions where this scenario is being offered."""
  sessions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SessionConnection!
}

type Session implements Node {
  """Tne number of available GM seats for this session."""
  availableGmSeats: Int!

  """Tne number of available player seats for this session."""
  availablePlayerSeats: Int!

  """
  The campaign mode chosen for this session. This choice is only relevant if the scenario
  offered in this session is part of an organized play campaign that has multiple campaign
  modes.
  
  """
  campaignMode: CampaignMode

  """Returns the slot's GM signups in chronological order."""
  gmSignups: [GmSignup!]!
  id: ID!

  """
  Whether the session is active in the event schedule. An inactive session may be subsequently
  activated to cause it to show up in the schedule.
  
  """
  isActive: Boolean!

  """
  The human language in which the session is conducted, as a two-letter ISO 639-1 code, if specified
  
  """
  language: String

  """Optional notes about the session."""
  notes: String

  """Returns the slot's player signups in chronological order."""
  playerSignups: [PlayerSignup!]!

  """
  Returns the access roles defined for this session.
  
  """
  roles: [SessionRole!]!

  """The scenario offering to be played in this session."""
  scenarioOffering: ScenarioOffering!

  """The Warhorn schedule URL for this session."""
  signupUrl: String!

  """The slot in which the session is scheduled."""
  slot: Slot!

  """The maximum number of people who can play at one table."""
  tableCount: Int!

  """The maximum number of tables that can be run in the session."""
  tableSize: Int!

  """The universally-unique identifier for this session."""
  uuid: String!

  """
  Links to virtual table tops where the tables of an online session will be played.
  
  """
  virtualTableTops: [VirtualTableTop!]!

  """
  Links to voice/chat services where the tables of an online session will be played.
  
  """
  voiceChatServices: [VoiceChatService!]!
}

enum SessionAvailability {
  """Player availability"""
  PLAYER

  """GM availability"""
  GM
}

"""Filter sessions by availability."""
input SessionAvailabilityFilter {
  """The type of availability to filter on."""
  type: SessionAvailability!

  """The number of seats to filter on."""
  value: Int!
}

"""The connection type for Session."""
type SessionConnection {
  """A list of edges."""
  edges: [SessionEdge]

  """A list of nodes."""
  nodes: [Session]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type SessionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Session
}

type SessionRole implements Node {
  """The time when the role was created."""
  createdAt: ISO8601DateTime!
  id: ID!

  """The event role that sits a level above this one in the role hierarchy."""
  parent: EventRole!

  """
  The list of permissions defining the operations accessible by this role.
  
  """
  permissions: [Permission!]!

  """The session which provides the scope for access defined by this role."""
  session: Session!
}

"""Represents a registrant's participation in an event activity."""
interface Signup {
  """
  Returns the registration associated with the registrant who signed up for the activity,
  if the requesting party is a site administrator or is registered for the event.
  
  """
  registration: Registration

  """
  Returns the access role defined for this signup within the scope of the session.
  
  """
  role: SignupRole
}

type SignupRole implements Node {
  """The time when the role was created."""
  createdAt: ISO8601DateTime!
  id: ID!

  """
  The list of permissions defining the operations accessible by this role.
  
  """
  permissions: [Permission!]!

  """The signup to which this role is assigned."""
  signup: Signup!
}

type Slot implements Node {
  """The time when the slot ends, as an ISO 8601-formatted timestamp."""
  endsAt: ISO8601DateTime!

  """The event in which this slot is scheduled."""
  event: Event!
  id: ID!

  """Returns the event's sessions."""
  sessions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SessionConnection!

  """The time when the slot starts, as an ISO 8601-formatted timestamp."""
  startsAt: ISO8601DateTime!

  """
  The time zone of the slot's location, from the IANA time zone database.
  """
  timezone: String!

  """The venue where the slot is held."""
  venue: Venue
}

"""The connection type for Slot."""
type SlotConnection {
  """A list of edges."""
  edges: [SlotEdge]

  """A list of nodes."""
  nodes: [Slot]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type SlotEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Slot
}

type UserAvatar implements Node {
  """Whether the user is active or inactive."""
  digest: String!
  id: ID!

  """Whether or not the avatar is blocked by the site administrators."""
  isBlocked: Boolean!
}

"""An error resulting from an error interaction"""
type UserError {
  """A human-understandable description of the error"""
  message: String!

  """Which input value this error came from"""
  path: [String!]
}

type Venue implements Node {
  """The street address of the venue."""
  address: String

  """The name of the city where the venue is located."""
  city: String

  """
  The two-character ISO 3166 code for the country where the venue is located.
  """
  country: String
  id: ID!

  """
  Whether or not the venue is public. A private venue's location attributes will only be non-null for event registrants.
  """
  isPublic: Boolean!

  """The latitude of the venue location."""
  lat: Float

  """The longitude of the venue location."""
  lng: Float

  """The name of the venue. Unique to the event."""
  name: String!

  """The E.164-formatted phone number of the venue."""
  phone: String

  """The ZIP or postal code for the region where the venue is located."""
  postal: String

  """The name of the state or province where the venue is located."""
  state: String
}

type VirtualTableTop implements Node {
  """Network location for the VTT game."""
  connectionGameType: VirtualTableTopGame

  """
  The name of the GM, used to identify an instance of a Fantasy Grounds Unity cloud-hosted VTT.
  """
  connectionGmName: String

  """
  The IP address at which the VTT is available, for Fantasy Grounds Unity LAN games.
  """
  connectionIpAddress: String

  """The password for the VTT."""
  connectionPassword: String

  """
  The port number at which the VTT is available, for Fantasy Grounds Unity LAN games.
  """
  connectionPort: String

  """
  The IP address or alias identifying an instance of a Fantasy Grounds Classic game.
  """
  connectionServer: String

  """The URL for a web-based VTT."""
  connectionUrl: String
  id: ID!

  """A descriptive name for the VTT."""
  name: String!

  """Notes about the VTT."""
  notes: String

  """
  A code identifying the software product providing the VTT functionality.
  """
  productType: VirtualTableTopProduct!
}

enum VirtualTableTopGame {
  """Game is hosted in a cloud-based VTT"""
  CLOUD

  """Game is hosted on a local network"""
  LAN
}

enum VirtualTableTopProduct {
  """Fantasy Grounds Classic"""
  FANTASY_GROUNDS_CLASSIC

  """Fantasy Grounds Unity"""
  FANTASY_GROUNDS_UNITY

  """Google Slides"""
  GOOGLE_SLIDES

  """Unknown VTT product"""
  OTHER

  """Roll20"""
  ROLL20
}

type VoiceChatService implements Node {
  """The name of the VCS text channel."""
  connectionTextChannel: String

  """The direct invite URL for the VCS text channel."""
  connectionTextUrl: String

  """The URL for a web-based VCS."""
  connectionUrl: String

  """The name of the VCS voice channel."""
  connectionVoiceChannel: String

  """The direct invite URL for the VCS voice channel."""
  connectionVoiceUrl: String
  id: ID!

  """A descriptive name for the VCS."""
  name: String!

  """Notes about the VCS."""
  notes: String

  """
  A code identifying the software service providing the voice/chat functionality.
  """
  serviceType: VoiceChatServiceService!
}

enum VoiceChatServiceService {
  """Discord"""
  DISCORD

  """Unknown voice/chat service"""
  OTHER

  """Zoom"""
  ZOOM
}

